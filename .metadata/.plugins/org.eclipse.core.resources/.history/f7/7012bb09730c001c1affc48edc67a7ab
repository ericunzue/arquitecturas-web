package factories;

import java.lang.reflect.InvocationTargetException;

import daoInterface.InClienteDao;
import daoInterface.InFacturaDao;
import daoInterface.InProductoDao;

public abstract class Factory {

	public static final int MYSQL_JDBC = 1;
	public static final int DERBY_JDBC = 2;
	public static final int JPA_HIBERNATE = 3;
	public static Factory getInstance(String className) {

     Factory dao = null;
		try {
			dao = (Factory) Class.forName(className).getDeclaredConstructor().newInstance();
		} catch (InstantiationException | IllegalAccessException
				| IllegalArgumentException | InvocationTargetException
				| NoSuchMethodException | SecurityException
				| ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 System.out.println(Class.forName(className));
		return null;

	}

//	public static Factory getInstance(int whichFactory) {
//		switch (whichFactory) {
//		case MYSQL_JDBC : return new SqlFactory();
//
//		case DERBY_JDBC: return null;
//
//		default: return null;
//		}
//
//	}

	abstract InClienteDao getClienteDao();
	abstract InFacturaDao getFacturaDao();
	abstract InProductoDao getProducotDao();
}
